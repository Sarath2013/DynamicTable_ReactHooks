{"version":3,"sources":["TableRow.js","TableComponent.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","props","inputChange","e","key","update","id","target","value","className","item","onChange","call","by","type","harga","qty","subTotal","onClick","headerData","TableComponent","useState","tableData","setTableData","updateTable","useCallback","newValue","newData","map","data","Object","assign","filter","index","colSpan","length","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd62133c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction TableRow(props) {\r\n    function inputChange(e, key) {\r\n        props.update(props.id, { [key]: e.target.value })\r\n    }\r\n\r\n    function removeRow() {\r\n        props.update(props.id);\r\n    }\r\n\r\n    return (\r\n        <tr className=\"table-row form-group\">\r\n            <td>\r\n                <select className=\"form-control\" value={props.item} onChange={(e) => inputChange.call(this, e, 'item')}>\r\n                    <option value=\"item1\">Item 1</option>\r\n                    <option value=\"item2\">Item 2</option>\r\n                    <option value=\"item3\">Item 3</option>\r\n                    <option value=\"item4\">Item 4</option>\r\n                </select>\r\n            </td>\r\n            <td>\r\n                <select className=\"form-control\" value={props.by} onChange={(e) => inputChange.call(this, e, 'by')}>\r\n                    <option value=\"by1\">By 1</option>\r\n                    <option value=\"by2\">By 2</option>\r\n                    <option value=\"by3\">By 3</option>\r\n                    <option value=\"by4\">By 4</option>\r\n                </select>\r\n            </td>\r\n            <td>\r\n                <input className=\"form-control\" type=\"number\" value={props.harga} onChange={(e) => inputChange.call(this, e, 'harga')} />\r\n            </td>\r\n            <td>\r\n                <input className=\"form-control\" type=\"number\" value={props.qty} onChange={(e) => inputChange.call(this, e, 'qty')} />\r\n            </td>\r\n            <td>\r\n                <input className=\"form-control\" type=\"number\" value={props.subTotal} onChange={(e) => inputChange.call(this, e, 'subTotal')} />\r\n            </td>\r\n            <td>\r\n                <button className=\"btn btn-danger btn-sm\" onClick={removeRow}><i className=\"fas fa-minus-circle\"></i></button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default React.memo(TableRow);","import React, { useState, useCallback } from 'react';\r\nimport TableRow from './TableRow';\r\nlet headerData = ['Item', 'By', 'Harga', 'Qty', 'Sub Total', 'Act'];\r\n\r\nfunction TableComponent() {\r\n    const [tableData, setTableData] = useState([{ id: 1, item: 'item1', by: 'by1', harga: '', qty: '', subTotal: '' }]);\r\n\r\n    function addRow() {\r\n        let newData = [...tableData, { id: (tableData[tableData.length - 1].id) + 1, item: 'item1', by: 'by1', harga: '', qty: '', subTotal: '' }];\r\n        setTableData(newData);\r\n    }\r\n\r\n    function submitData() {\r\n        console.log(tableData);\r\n    }\r\n\r\n    const updateTable = useCallback((id, newValue) => {\r\n        let newData = [];\r\n        if (newValue)\r\n            newData = tableData.map((data) => (id === data.id) ? Object.assign({}, data, newValue) : data);\r\n        else\r\n            newData = tableData.filter((data) => (id !== data.id));\r\n        setTableData(newData);\r\n    }, [tableData]);\r\n\r\n    return (\r\n        <table className=\"dynamic-table table table-bordered table-striped\">\r\n            <thead>\r\n                <tr key=\"header-tr\">\r\n                    {headerData.map((value, index) => {\r\n                        return <th key={index}><div>{value}</div></th>\r\n                    })}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableData.map((data) => {\r\n                    return <TableRow key={data.id} id={data.id} item={data.item} by={data.by} harga={data.harga} qty={data.qty} subTotal={data.subTotal} update={updateTable} />\r\n                })}\r\n                <tr className=\"tr-new\" key=\"tr-new\">\r\n                    <td colSpan=\"5\"></td>\r\n                    <td><button className=\"btn btn-success\" onClick={addRow}><i className=\"fas fa-plus\"></i>New</button></td>\r\n                </tr>\r\n                <tr className=\"tr-submit\" key=\"tr-submit\">\r\n                    <td colSpan=\"5\"></td>\r\n                    <td><button className=\"btn btn-success\" onClick={submitData}>Submit</button></td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default TableComponent;\r\n","import React from 'react';\nimport TableComponent from './TableComponent';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}